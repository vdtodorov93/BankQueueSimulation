1.Използвани класове
1.1 Bank
Чрез методите на този клас се случват основните действия. Всяка банка има касиери, 
също така съдържа информацията която по-късно се използва за извличане на статистики.
servedClients - брой обслужени клиенти
totalWaitedTime - общо време, което са чакали всички клиенти.
totalQueueSize - Общ размер на опашката от клиенти.
maxQueueSize - Максимален размер, до който е достигнала опашката.
totalCashiersFreeTime - Колко минути са били свободни касиерите за целият ден.

1.2Cashier
minutesToServeClient - минути оставащи да се обслужи клиента. Когато дойде нов клиент,
тази стойност се получава чрез рандом генератор/
minutesFree - общ брой минути за деня, в които касиерът е бил свободен.
clientsServed - брой обслужени клиенти за деня.

1.3Client
При начинът на представяне на данни който съм избрал, единственото което ми трябва
да знам за клиента е минутата в която той е влязъл в банката.

1.4QueueGenerator
За ролята на този клас - в описанието по-долу.

2. Как работи банката? (алгоритъм).
Когато се използва функцията GetClientsForDay() се получава vector<Client> запълнен със случаен брой клиенти
между 50 и 250.
За всеки клиент се задава случаен момент, в който той влиза в банката - между 1 и 480та минута.
След това се сортират по момента в който са влезли в банката и се добавят в опашка, която се
връяа като резултат от изпълнението на функцията.

Горната функция се изпълнява при извикване на SimulateWorkDay();
Симулирането на работен ден работи с цикъл от 1 до WORK_TIME (480). Всяка минута се извършват следните неща:
-Ако има още хора в голямата опашка, които трябва да минат през банката, се взима този
най-отпред и се проверява дали currMinute >= минутата, в която той трябва да влезе.
Ако е вярно, той се маха от опашката и се добавя в малката опашка, която пази всички вече
влезли в банката хора, чакащи реда си.
-С цикъл по касиерите се проверява дали точно на тази минута се свършва с обслужването на
даден клиент. Ако това е така - броят на обслужените клиенти се увеличава с един.
Обозначавам че касиерът е свободен, като в член-данната Client* currentClient записвам NULL
-Следва нов цикъл по касиерите, ако има свободен касиер - той взима първият чакащ на опашката клиент
(ако има такъв). Клиент се обслужва между 1 и 20 минути.
-Ако размерът на опашката е по-голям от най-големият достигнат до момента, променяма "рекорда"
-След това с нов цикъл по касиери проверяваме колко от тях са заети и колко не са, съответно променяме
статистките с каквото е нужно.

С извъртането на този цикъл приключва денят. Записват се нужните данни в член-данните на обекта от тип Bank.

MakeFullReport печата всички нужни статистики, използвайки член-данните на обекта от тип Bank.